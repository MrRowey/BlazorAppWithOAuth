@using BlazorApp1.Models

@page "/units/structures/shield"
@inject BlazorApp1.Services.CalculationService CaculationHelper

<h3>Shield Caculator</h3>

<EditForm Model="@unitData" OnValidSubmit="HandleValidSubmit" class="unit-form-condensed">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <!-- Description Section -->
    <h3>Description</h3>
    <div class="form-row description">
        <div class="form-group">
            <label for="UnitName">Unit Name:</label>
            <InputText id="UnitName" @bind-Value="unitData.UnitName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="UnitID">Unit ID:</label>
            <InputText id="UnitID" @bind-Value="unitData.UnitID" class="form-control" />
        </div>
    </div>

    <!-- Base Stats Section -->
    <h3>Base Stats</h3>
    <div class="form-row">
        <div class="form-group">
            <label for="Health">Health:</label>
            <InputNumber id="Health" @bind-Value="unitData.Health" class="form-control" />
        </div>
        <div class="form-group">
            <label for="MassCost">Mass Cost:</label>
            <InputNumber id="MassCost" @bind-Value="unitData.MassCost" class="form-control" />
        </div>
        <div class="form-group">
            <label for="EnergyCost">Energy Cost:</label>
            <InputNumber id="EnergyCost" @bind-Value="unitData.EnergyCost" class="form-control" />
        </div>
        <div class="form-group">
            <label for="BuildTime">Build Time:</label>
            <InputNumber id="BuildTime" @bind-Value="unitData.BuildTime" class="form-control" />
        </div>
    </div>

    <!-- Shield Stats Section -->
    <h3>Shield Stats</h3>
    <div class="form-row">
        <div class="form-group">
            <label for="ShieldHealth">Health:</label>
            <InputNumber id="ShieldHealth" @bind-Value="unitData.ShieldHealth" class="form-control" />
        </div>
        <div class="form-group">
            <label for="ShieldRegen">Regen:</label>
            <InputNumber id="ShieldRegen" @bind-Value="unitData.ShieldRegenRate" class="form-control" />
        </div>
        <div class="form-group">
            <label for="ShieldSize">Size:</label>
            <InputNumber id="ShieldSize" @bind-Value="unitData.ShieldSize" class="form-control" />
        </div>
        <div class="form-group">
            <label for="ShieldRechargeTime">Recharge Time:</label>
            <InputNumber id="ShieldRechargeTime" @bind-Value="unitData.ShieldRechargeTime" class="form-control" />
        </div>
    </div>

    <!-- Economy Section -->
    <h3>Economy</h3>
    <div class="form-row">
        <div class="form-group">
            <label for="BuildRate">Build Rate:</label>
            <InputNumber id="BuildRate" @bind-Value="unitData.BuildRate" class="form-control" />
        </div>
        <div class="form-group">
            <label for="EnergyDrain">Energy Drain:</label>
            <InputNumber id="EnergyDrain" @bind-Value="unitData.EnergyDrain" class="form-control" />
        </div>
    </div>

    <!-- Intel Section -->
    <h3>Intel</h3>
    <div class="form-row">
        <div class="form-group full-width">
            <label for="VisionRadius">Vision Radius:</label>
            <InputNumber id="VisionRadius" @bind-Value="unitData.VisionRange" class="form-control" />
        </div>
    </div>

    <!-- Submit Button -->
    <button type="submit" class="btn-submit">Input Data</button>
</EditForm>

<!-- Condensed Styling Section -->
<style>
    .unit-form-condensed {
        max-width: 1000px;
        margin: 0 auto 20px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
    }

    h3 {
        margin: 10px 0;
        font-size: 1.2em;
        color: #333;
        border-bottom: 1px solid #007bff;
        padding-bottom: 3px;
        text-align: center;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .form-group {
        flex: 1 1 22%;
        text-align: center;
        margin: 0 5px;
    }

        .form-group.full-width {
            flex: 1 1 100%;
            margin: 0 5px;
        }

        .form-group label {
            display: block;
            margin-bottom: 2px;
            font-weight: bold;
            font-size: 0.9em;
            color: #333;
        }

    .form-control {
        width: 100%;
        padding: 5px;
        font-size: 0.9em;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 3px rgba(0, 123, 255, 0.5);
        }

    .btn-submit {
        display: block;
        width: 100%;
        padding: 8px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

        .btn-submit:hover {
            background-color: #0056b3;
        }
</style>


@if (unitList.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th></th> <!-- Empty for column headers -->
                @foreach (var unit in unitList)
                {
                    <th>@unit.UnitID</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Unit ID</th>
                @foreach (var unit in unitList)
                {
                    <td>@unit.UnitID</td>
                }
            </tr>
            <tr>
                <th>Health</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].Health
                        @if (i > 0)
                        {
                            <span>(@Services.CalculationService.PercentageChange(unitList[i].Health, unitList[i - 1].Health)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Mass Cost</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].MassCost
                        @if (i > 0)
                        {
                            <span>(@Services.CalculationService.PercentageChange(unitList[i].MassCost, unitList[i - 1].MassCost)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Energy Cost</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].EnergyCost
                        @if (i > 0)
                        {
                            <span>(@Services.CalculationService.PercentageChange(unitList[i].EnergyCost, unitList[i - 1].EnergyCost)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Build Time</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].BuildTime
                        @if (i > 0)
                        {
                            <span>(@Services.CalculationService.PercentageChange(unitList[i].BuildTime, unitList[i - 1].BuildTime)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Shield Health</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].ShieldHealth
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].ShieldHealth, unitList[i - 1].ShieldHealth)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Shield Regen</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].ShieldRegenRate
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].ShieldRegenRate, unitList[i - 1].ShieldRegenRate)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Shield Size</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].ShieldSize
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].ShieldSize, unitList[i - 1].ShieldSize)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Shield Recharge Time</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].ShieldRechargeTime
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].ShieldRechargeTime, unitList[i - 1].ShieldRechargeTime)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Build Rate</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].BuildRate
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].BuildRate, unitList[i - 1].BuildRate)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Energy Drain</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].EnergyDrain
                        @if (i > 0)
                        {
                            <span>(@CaculationHelper.PercentageChange(unitList[i].EnergyDrain, unitList[i - 1].EnergyDrain)%)</span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th>Vision Radius</th>
                @for (int i = 0; i < unitList.Count; i++)
                {
                    <td>
                        @unitList[i].VisionRange
                        @if (i > 0)
                        {
                            <span>(@Services.CalculationService.PercentageChange(unitList[i].VisionRange, unitList[i - 1].VisionRange)%)</span>
                        }
                    </td>
                }
            </tr>
            <!-- Row for Delete Buttons -->
            <tr>
                <th>Delete Unit</th> <!-- Empty header for delete row -->
                @foreach (var unit in unitList)
                {
                    <td> 
                        <button @onclick="() => DeleteShield(unit)">Delete</button>
                    </td>
                }
            </tr>
        </tbody>
    </table>
}

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 1em;
        font-family: Arial, sans-serif;
    }

    thead th {
        background-color: #f2f2f2;
        font-weight: bold;
        padding: 10px;
        border-bottom: 2px solid #ddd;
        text-align: left;
    }

    tbody th {
        text-align: left;
        background-color: #f9f9f9;
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    tbody td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tbody tr:hover {
        background-color: #e9e9e9;
    }
</style>

@code {
    private ShieldUnit unitData = new ShieldUnit("", "",0,0,0,0,0,0,0,0,0,0,0);
    private List<ShieldUnit> unitList = new List<ShieldUnit>();

    private void HandleValidSubmit()
    {
        // Add the new unit Data to the lsit
        unitList.Add(new ShieldUnit(

            unitData.UnitName,
            unitData.UnitID,
            unitData.Health,
            unitData.MassCost,
            unitData.EnergyCost,
            unitData.BuildTime,
            unitData.VisionRange,
            unitData.ShieldHealth,
            unitData.ShieldRegenRate,
            unitData.ShieldSize,
            unitData.ShieldRechargeTime,
            unitData.BuildRate,
            unitData.EnergyDrain
        ));

        // Reset the form for the next shield data input
        unitData = new ShieldUnit("","",0,0,0,0,0,0,0,0,0,0,0);
    }

    // Use the helper method to calculate the percentage change between two values
    private double GetPercentageChange(int currentValue, int previousValue)
    {
        return Services.CalculationService.PercentageChange(currentValue, previousValue);
    }

    // Method to delete shield by index
    private void DeleteShield(ShieldUnit unit)
    {
        unitList.Remove(unit);
    }

}
